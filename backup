#!/usr/bin/env python3

import os
import json
import subprocess
import datetime
import argparse

CONFIG_FILE = os.path.expanduser("~/.config/systemd-backup/backup.json")
PASSPHRASE_FILE = os.path.expanduser("~/.config/systemd-backup/.secret")


def resolve(path):
    return os.path.expanduser(path)


def read_config():
    if not os.path.isfile(CONFIG_FILE):
        print(f"Configuration file not found: {CONFIG_FILE}")
        return None

    if not os.path.isfile(PASSPHRASE_FILE):
        print(f"Secret file not found: {PASSPHRASE_FILE}")
        print("Make sure the secret file does not end in new line!")
        return None

    with open(CONFIG_FILE) as f:
        try:
            config = json.load(f)
        except json.JSONDecodeError as e:
            print(f"Error parsing configuration file: {e}")
            return None

    include_paths = list(map(resolve, config.get("include_paths", [])))
    exclude_paths = list(map(resolve, config.get("exclude_paths", [])))
    force_include_paths = list(map(resolve, config.get("force_include_paths", [])))
    backup_location = resolve(config.get("backup_location"))
    backup_remotes = config.get("backup_remotes", [])

    if not backup_location:
        print("Backup location not specified in the configuration file.")
        return None

    if not os.path.isdir(backup_location):
        print(f"Creating backup location: {backup_location}")
        os.makedirs(backup_location)

    return include_paths, exclude_paths, force_include_paths, backup_location, backup_remotes


def execute_rsync(include_paths, exclude_paths, force_include_paths, backup_location):
    rsync_command = [
        "rsync",
        "-a",
        "--progress",
        "--relative",
        "--delete",
        "--delete-delay",
        "--delete-excluded"
    ]

    if force_include_paths:
        for force_include_path in force_include_paths:
            rsync_command.append(f"--include={force_include_path}")

    if exclude_paths:
        for exclude_path in exclude_paths:
            rsync_command.append(f"--exclude={exclude_path}")

    if include_paths:
        rsync_command.extend(include_paths)

    rsync_command.append(f"{backup_location}/")

    print(f"Starting backup, executing: {rsync_command}")
    print(f"Backup location: {backup_location}")

    try:
        subprocess.run(rsync_command, check=True)
    except subprocess.CalledProcessError as e:
        print(f"Error running rsync command: {e}")
        return False

    print("Backup completed.")
    return True


def bundle_and_encrypt_backup(backup_location):
    timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
    root = os.path.dirname(backup_location)
    filename = os.path.basename(backup_location)
    os.makedirs(f"{root}/archive", exist_ok=True)
    destination = f"{root}/archive/{filename}-{timestamp}.tar.gz.gpg"
    with open(PASSPHRASE_FILE, "r") as file:
        passphrase = file.read()

    print(f"Bundling {backup_location} to {destination}")

    bundle_command = [
        "tar",
        "-C",
        os.path.dirname(backup_location),
        "-zcv",
        os.path.basename(backup_location)
    ]
    encrypt_command = [
        "gpg",
        "--batch",
        "--symmetric",
        "--cipher-algo=aes256",
        f"--passphrase={passphrase}",
        "-o",
        destination
    ]

    try:
        tar_ps = subprocess.Popen(bundle_command, stdout=subprocess.PIPE)
    except subprocess.CalledProcessError as e:
        print(f"Error running tar command: {e}")
        return None

    try:
        subprocess.run(encrypt_command, check=True, stdin=tar_ps.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Error running gpg command: {str(e).replace(passphrase, '*****')}")
        return None

    print(f"{destination} created!")
    return destination


def send_to_remote_backups(encrypted_archive, backup_remotes):

    for remote in backup_remotes:
        rsync_command = [
            "rsync",
            "-zP",
            "--progress",
            encrypted_archive,
            f"{remote}/"
        ]

        try:
            subprocess.run(rsync_command, check=True)
        except subprocess.CalledProcessError as e:
            print(f"Error running rsync command: {e}")
            return False


def main():
    config = read_config()

    parser = argparse.ArgumentParser(description="Create backups of your linux directories")
    parser.add_argument(
        "--sync-to-backup",
        dest="sync_to_backup",
        action='store_true',
        required=False,
        help="Synchronizes directories to backup directory")
    parser.add_argument(
        "--bundle-and-encrypt",
        dest="bundle_and_encrypt",
        action='store_true',
        required=False,
        help="Bundles and encrypts the backup directory")
    parser.add_argument(
        "--send-to-remotes",
        dest="send_to_remotes",
        action='store_true',
        required=False,
        help="Sends encrypted archive to the backup remotes specified in ~/.config/systemd-backup/backup.json")

    args = parser.parse_args()

    if config:
        include_paths, exclude_paths, force_include_paths, backup_location, backup_remotes = config
        if args.sync_to_backup:
            execute_rsync(include_paths, exclude_paths, force_include_paths, backup_location)
        elif args.bundle_and_encrypt:
            encrypted_archive = bundle_and_encrypt_backup(backup_location)
            if args.send_to_remotes and encrypted_archive is not None:
                send_to_remote_backups(encrypted_archive, backup_remotes)
        else:
            if execute_rsync(include_paths, exclude_paths, force_include_paths, backup_location):
                encrypted_archive = bundle_and_encrypt_backup(backup_location)
                if encrypted_archive is not None:
                    send_to_remote_backups(encrypted_archive, backup_remotes)


if __name__ == "__main__":
    main()

